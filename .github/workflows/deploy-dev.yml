name: Deploy to Dev Server

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name: Deploy to server
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
      run: |
        # Create a tarball of the project
        git archive --format=tar.gz -o project.tar.gz HEAD
        
        # Copy the tarball to the server and extract it
        sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no project.tar.gz $SERVER_USER@$SERVER_IP:/tmp/project.tar.gz
        sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
          
          cd ~/grantgpt/
          
          # Stop services first to prevent file locks
          cd deployment/docker_compose
          docker compose -f docker-compose.prod.yml -p onyx-stack down || true
          cd ~/grantgpt/
          
          # Clean up top-level directories and files (except deployment)
          for item in * .[^.]* ..?*; do
            if [ -e "$item" ] && [ "$item" != "deployment" ] && [ "$item" != "." ] && [ "$item" != ".." ]; then
              rm -rf "$item"
            fi
          done
          
          # Clean up deployment directory (except data)
          for item in deployment/*; do
            if [ -e "$item" ] && [ "$item" != "deployment/data" ]; then
              rm -rf "$item"
            fi
          done
          
          # Clean up deployment/data directory (except certbot)
          for item in deployment/data/*; do
            if [ -e "$item" ] && [ "$item" != "deployment/data/certbot" ]; then
              rm -rf "$item"
            fi
          done
          
          # Extract new code
          mv /tmp/project.tar.gz project.tar.gz
          tar -xzf project.tar.gz
          rm project.tar.gz
          
          cd deployment/docker_compose
          
          # Copy .env files
          cp ~/env_files/.env .env
          cp ~/env_files/.env.nginx .env.nginx
          
          # Deploy
          docker compose -f docker-compose.prod.yml -p onyx-stack up -d --build --force-recreate

        EOF
